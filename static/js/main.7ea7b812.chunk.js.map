{"version":3,"sources":["components/ListBox.js","App.js","serviceWorker.js","index.js"],"names":["ListBox","props","listDisplay","list","map","item","className","key","type","value","text","onChange","e","setUpdate","target","id","onClick","deleteItem","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredList","filter","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRAkCeA,MA7Bf,SAAiBC,GACb,IACMC,EADOD,EAAME,KACMC,KAAI,SAAAC,GACzB,OACI,yBAAKC,UAAY,YAAYC,IAAKF,EAAKE,KACnC,2BAAOC,KAAK,OACZF,UAAY,aACZG,MAAOJ,EAAKK,KACZC,SACI,SAACC,GACGX,EAAMY,UAAUD,EAAEE,OAAOL,MAAOJ,EAAKE,QAG7C,uBAAGD,UAAY,YAAW,0BAAMS,GAAG,cAC/BC,QAAS,kBAAMf,EAAMgB,WAAWZ,EAAKE,OACrC,kBAAC,IAAD,YAKhB,OACI,yBAAKQ,GAAK,YAEDb,ICkEFgB,E,kDAvFb,WAAYjB,GAAO,IAAD,8BAChB,cAAMA,IACDkB,MAAQ,CACXhB,KAAM,GACNiB,YAAY,CACVV,KAAK,GACLH,IAAI,KAIR,EAAKc,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKL,WAAa,EAAKA,WAAWK,KAAhB,gBAClB,EAAKT,UAAY,EAAKA,UAAUS,KAAf,gBAbD,E,wDAeNV,GACVY,KAAKC,SAAS,CACZL,YAAY,CACVV,KAAME,EAAEE,OAAOL,MACfF,IAAKmB,KAAKC,W,8BAIRf,GACNA,EAAEgB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAG3B,GAFAU,QAAQC,IAAIF,GAEI,KAAZA,EAAgB,CAClB,IAAMG,EAAQ,sBAAOR,KAAKL,MAAMhB,MAAlB,CAAwB0B,IACtCL,KAAKC,SAAS,CACZtB,KAAM6B,EACNZ,YAAY,CACVV,KAAK,GACLH,IAAI,S,iCAKDA,GACT,IAAM0B,EAAeT,KAAKL,MAAMhB,KAAK+B,QAAO,SAAA7B,GAAI,OAAIA,EAAKE,MAAQA,KACjEiB,KAAKC,SAAS,CACZtB,KAAK8B,M,gCAGCvB,EAAMH,GACd,IAAMJ,EAAOqB,KAAKL,MAAMhB,KACxBA,EAAKC,KAAI,SAAAC,GAIP,OAHGA,EAAKE,MAAQA,IACdF,EAAKK,KAAOA,GAEPP,KAETqB,KAAKC,SAAS,CACZtB,KAAMA,M,+BAIR,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,4BACE,0BAAMA,UAAU,YAAW,kBAAC,IAAD,OAD7B,sBAIF,6BAASS,GAAG,gBACV,yBAAKA,GAAG,eACN,0BAAMA,GAAG,YAAYoB,SAAUX,KAAKD,SAChC,2BAAOa,YAAY,aAAa5B,KAAK,OACrCO,GAAG,aAAaT,UAAY,WAC5BG,MAAOe,KAAKL,MAAMC,YAAYV,KAC9BC,SAAUa,KAAKH,cACf,4BAAQb,KAAK,SAASF,UAAU,WAAWS,GAAG,WAA9C,SAGN,6BACE,kBAAC,EAAD,CAASZ,KAAMqB,KAAKL,MAAMhB,KAC1Bc,WAAYO,KAAKP,WACjBJ,UAAWW,KAAKX,mB,GA/EVwB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.7ea7b812.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport {FaTrash} from 'react-icons/fa';\r\n//import FlipMove from 'react-flip-move';\r\n\r\nfunction ListBox(props) {\r\n    const list = props.list;\r\n    const listDisplay = list.map(item => {\r\n        return (\r\n            <div className = \"list-item\" key={item.key}>\r\n                <input type=\"text\"\r\n                className = \"list-input\" \r\n                value={item.text}\r\n                onChange={\r\n                    (e) => {\r\n                        props.setUpdate(e.target.value, item.key)\r\n                    }\r\n                }/>                \r\n                <p className = \"icon-box\"><span id=\"delete-icon\"\r\n                    onClick={() => props.deleteItem(item.key)}>\r\n                    <FaTrash/></span></p>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return(        \r\n        <div id = \"list-box\">\r\n            \r\n                {listDisplay}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListBox;","import React,{Component} from 'react';\nimport {FaList} from 'react-icons/fa';\n\nimport './App.css';\nimport ListBox from './components/ListBox';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      list: [],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    // STILL DON'T UNDERSTAND THIS LINE BELOW\n    this.handleInput = this.handleInput.bind(this);    \n    this.addItem = this.addItem.bind(this);    \n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n\n    if (newItem !== \"\") {\n      const newItems = [...this.state.list, newItem];\n      this.setState({\n        list: newItems,\n        currentItem:{\n          text:'',\n          key:'',\n        }\n      });\n    }\n  }\n  deleteItem(key){\n    const filteredList = this.state.list.filter(item => item.key !== key);\n    this.setState({\n      list:filteredList\n    })\n  }\n  setUpdate(text, key){\n    const list = this.state.list;\n    list.map(item => {\n      if(item.key === key){\n        item.text = text;\n      }\n      return list;\n    })\n    this.setState({\n      list: list\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>\n            <span className=\"App-logo\"><FaList/></span> Simple Todo List\n          </h2>\n        </header>\n        <section id=\"list-section\">\n          <div id=\"list-header\">\n            <form id=\"todo-form\" onSubmit={this.addItem}>\n                <input placeholder=\"Enter text\" type=\"text\" \n                id=\"task-input\" className = \"app-item\"\n                value={this.state.currentItem.text}\n                onChange={this.handleInput}/>\n                <button type=\"submit\" className=\"app-item\" id=\"btn-add\">Add</button>\n              </form>\n          </div>\n          <div>\n            <ListBox list={this.state.list}\n            deleteItem={this.deleteItem}\n            setUpdate={this.setUpdate}/>\n          </div>        \n        </section>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}